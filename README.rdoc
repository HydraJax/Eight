Monday June Second, In the year of our lord Twenty fourteen.  Here is what we have done in order to appease the coding demi-gods (hencforth known as Colth and Stuarth):

The Awaited Journey (Part One)

1. Make a new directory, cd into it.
2. Run rails new Eight (the app name) -T -d postgresql (-T and _d omit testing and make postgresql thee database)
3. We installed the gems qiet assets, better errors, binding of caller, awesome print, pry rails, pry bybug rspec rails. a google dev tools, 
in git I did an add commit , added a remote origin my github account, and git push --set-upstream origin getting_started on a new branch (getting started which I checked out.)
4. created a database for the app by running rake db create and migrate.
5. Ran rails g rspec:install
6. gemfile lock is what gems you had when you did bundle

The Awaited Journey (Part Two)

 I created a branch helloworl_rspec and added the gem capybarra which deals more with user interaction (clicking and responses)

 IN testing there are 4 steps:setup-class object or model to be tested (user=User.new), exercise tests (user.save) the sysytem, verify: results measured against developers expectations (user-should not be_nil)

 I created a folder and file features/hello_world_spec.rb and added code that would test if hello world was included in a view and if it had a h1 tag

 Modified the rspec helper, deleted unused files with git rm, after we used rails g controler pages(name of controller) helloworld(name of action ...then modified the route)

 Day Three

 installed bootstrap gems, bundle install then changed the navbar  VIA rails generate bootstrap:install -f.......nice to have a template for the navebar

 rspec tests still pass

 made a link to the view page link_to Hello World, hellowworld_path

 changed the scss file      $navbar-inverse-bg:                         rgb(144,176,0) !default;
  to change the navbar header on bootstrap

  restart server if you get a ton of errors and know not what they mean....moving on

The Awaited Journey (Part Three)

rails generate scaffold Thing name:string description:text     generated the model THING with name and description

SCAFOLD FILES

      invoke  active_record....migrations
      create    db/migrate/20140528055411_create_things.rb
      create    app/models/thing.rb.....this is our model
      invoke    rspec
      create      spec/models/thing_spec.rb....this is our test for the rspec model
      invoke  resource_route
       route    resources :things....these are our routes
      invoke  scaffold_controller
      create    app/controllers/things_controller.rb
      invoke    erb...this is our controller
      create      app/views/things...these are all our views for the layouts
      create      app/views/things/index.html.erb
      create      app/views/things/edit.html.erb
      create      app/views/things/show.html.erb
      create      app/views/things/new.html.erb
      create      app/views/things/_form.html.erb
      invoke    rspec.....this is our controller spec file
      create      spec/controllers/things_controller_spec.rb....these will be the spec files for our views...each
      create      spec/views/things/edit.html.erb_spec.rb
      create      spec/views/things/index.html.erb_spec.rb
      create      spec/views/things/new.html.erb_spec.rb
      create      spec/views/things/show.html.erb_spec.rb
      create      spec/routing/things_routing_spec.rb
      invoke      rspec
      create        spec/requests/things_spec.rb
      invoke    helper...these are all our spec helpers that assist the specs
      create      app/helpers/things_helper.rb
      invoke      rspec
      create        spec/helpers/things_helper_spec.rb
      invoke    jbuilder...to help working with json
      create      app/views/things/index.json.jbuilder
      create      app/views/things/show.json.jbuilder
      invoke  assets
      invoke    coffee...I dont think we need coffee
      create      app/assets/javascripts/things.js.coffee
      invoke    scss

ERRORS are saved in the model.errors field

factory girl thing, make and test objects in rails c


Part 4-5-6

Installed forgery gem to populated seed data:  
 
Thing.find_or_create_by(name: 'Sleeping pills') do |thing|
 thing.description = 'Holloween candy'
end

  200.times do
    Thing.create(name: Forgery(:lorem_ipsum).words(2, :random =>true),description: Forgery(:lorem_ipsum).words(5, :random =>true))
  end

  went to rails girls for help with devise workarounds

  EIGHT....last chapter
  associations

  user = User.first
  200.times do
    user.things.create(name: Forgery(:lorem_ipsum).words(2, :random =>true),description: Forgery(:lorem_ipsum).words(5, :random =>true))
  end

  created a user to access the things table .....WHEN USING DEVISE DO A USER.FIRST SINCE USER.CREATE WONT WORK MOST TIMES.

  I added the user to things table with the associated reference so I could gain acces to it via blongs_to and Has_many in the models
